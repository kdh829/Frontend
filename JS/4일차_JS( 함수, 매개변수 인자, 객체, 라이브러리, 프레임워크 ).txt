///// Javascript 기본

1. 함수
: 떠오르는 이미지는 수납상자이다. 프로그래밍 관점에서 봤을 때, 함수는 코드를 잘 정리정돈하기 위한 도구로, 간단하고 강력하다.
이보다 더 큰 도구의 개념은 '객체'라고 불리는 것( 하단 '객체' 참조 ). 극단적으로 1억개의 'blue' 색상 코드 중 어떤 조건에 따라
다른 색으로 바꿔야 한다면 1억개의 코드를 모두 수정해야 한다. 이걸 하나의 함수로 소스를 정돈해서 메인 코드에 적용하면 된다.

함수가 반복문과 다른 특수점이 있다. 중복문이 연속돼있다면, 반복문을 써야 하지만, 연속되지 않은 중복문이라면 반복문을 쓸 수가 없다.
이때, 함수를 쓰면 된다. 

ex)
	<body>
    		<h1>Function</h1>
    		<h2>Basic</h2>
    		<ul>
      			<script>
			        function two(){
				          document.write('<li>2-1</li>');
          				  document.write('<li>2-2</li>');
        				           };
				          document.write('<li>1</li>');
        			          two();
        				  document.write('<li>3</li>');
        				  two();
      			</script>
    		</ul>
    		<h2>Parameter & Argument</h2>
    		<h2>Return</h2>
  	</body>

1-1) 매개변수와 인자
: 매개변수는 함수 function(left, right)와 같이 해당 함수로 데이터(인자 값)가 들어올 때, 데이터를 받는 변수를 의미한다.
인자는 함수로 입력되는 데이터로 내부 변수인 left, right에 매개되도록 한다. 이것이 함수 입력( Import ) 과정의 기본이다.

ex) 
        function sum(left, right){
		          document.write(left + right + '<br>');
        				}
        	sum(2,3); // 5
        	sum(3,4); // 7

1-2) 객체, 프로퍼티, 메소드
변수가 많아지면, 함수로 / 함수와 변수가 많아지면 객체로

1-3) 파일 쪼개기
객체가 많아지면 파일을 쪼개서 해당 파일을 import 해줄 수 있다. 1억개의 소스가 있어도
파일 소스만 바꿔주면 다 적용되는 것이다. 파일을 정리정돈을 위한 보관함이라고 생각하면 된다.

1-4) 라이브러리 & 프레임워크
라이브러리는 이미 주어진 기능들을 가져와 쓰는 것이고, 프레임워크는 '반제품'같은 개념으로 조금씩 수정하기도하고
주어진 틀 안에서 조립하며 개발할 수 있는 환경을 제공한다. 유명한 라이브러리는 'jQuery'가 있다. 그냥 src로 Import해서
쓸 수 있음


///// CSS 기본 문법

1. CSS를 웹 브라우저에서 사용하는 방법 두 가지
1-1) CSS 태그 사용 : 이 경우에는 선택자라는 개념이 들어온다. 이 웹 페이지에서 해당 코드 효과를 누구에게 줄 것인가를 선택한다는 점에서
그렇다.
( EX. <style> a { color:black; } </style> )

1-2) CSS 속성 사용 : 이 방법은 해당 태그에 CSS 속성을 직접 부여하기 때문에 선택자를 선언할 이유가 없다.
( EX. < a href="https://www.naver.com" target="_blank" style="color:red" > )

2. CSS 기능
2-1) 링크 밑줄 없애기 : "text-decoration : none;" | text-decoration은 텍스트를 꾸미는 장식을 넣는 속성
( <head>
  <style>
    a{ color:red;
        text-decoration: none;}
  </style>
</head> ) 

: 헤더에 선언하고 해당 태그에 모두 적용해주겠다라고 알려주는 것임

2-2) 현재 웹 페이지에 대해 밑줄 긋기 : <li><a href="2.html" style="color:red; text-decoration:underline;">CSS</a></li>

: 속성 내에 정의하는 ;(세미콜론)들은 각 속성을 구분할 수 없기 때문에 구분해주는 '구분자'의 역할을 하는 것임

3. 제목이 좀더 컸으면 좋겠다 / 정렬 기능 추가
3-1) 텍스트 크기 속성 : font-size ( ex. font-size: 45px OR 5rem; ) | px는 컴퓨터에서 사용하는 단위. 
3-2) 텍스트 정렬 속성 : text-align ( ex. text-align: center; )

4. 같은 의도를 가진 것들끼리 하나로 그루핑해서 처리하기
: 어떤 특정 목적에 따라 하나로 그루핑해서 한꺼번에 처리하기 위한 문법이 있다.
CLASS 라는 개념인데, 주의할 것은 그냥 class="saw" 라고 해놓고 saw { 코드 } 해버리면, 
단순 saw라는 이름의 태그를 선택하는 선택자의 역할만 한다. CLASS 로 묶인 것임을 나타내기 위해 .saw { 코드 }로 쓴다.

하나의 태그 안에 여러 개의 class 속성을 기입하여 공동 제어할 수도 있는데, '띄어쓰기'로 구분하면 된다.
근데 여기서 알아둘 것은 class 선택자끼리 봤을 때, 최근 입력 값이 최우선되어 제어된다는 사실이다.
같은 속성끼리는 최근 입력값이 최우선 반영되므로 작성 순서 구분없이 우선순위를 구별할 수 있는 방법이 있다.

5. ID 속성, 선택자
: 표현 예시는 ( <a href="2.html class="saw" id="active">CSS</a></li> ) ( <style> #active { color:red } </style> )
즉, 앞에 #을 붙인다. 

힘에 따른 우선순위 속성은 다음과 같다. ( 태그 < 클래스 < 아이디 )

그나저나 선택자에서 우선순위는 왜 존재하는 지에 대해 궁금증이 생긴다.
먼저, 태그와 클래스, 아이디 중에 가장 포괄적인 선택자는 '태그'임을 알 수 있다.
아이디는 현실에 빗대었을 때, '아이디 카드' 즉, 주민등록증과 동일한 역할을 한다. 소스 상에 딱 한 번만 나와야 하는 셈이다.
동시에 여러 개를 사용해도 동작은 하지만 의도에 맞지 않기에 권장 사항은 아니라는 말을 볼 수 있다.
가장 포괄적이고 일반적인 속성들을 '태그'에 넣고 예외 사항들은 '아이디'에 넣어 활용하면 된다.
이 두 사이에는 중간 권력을 지닌 '클래스'가 존재한다.

이 세가지를 의도에 맞게 잘 활용하면 소스 코드를 줄일 수 있고 똑똑한 코드를 짤 수 있을 것이다.
( 참조 검색어 "CSS Selector" )

6. 박스 모델
: 말 그대로 웹 브라우저에 표시할 박스를 디자인하는 것

부피를 적용하는 방법에는 '화면 전체 적용' 태그와 '자신의 콘텐츠 크기만큼 적용' 태그 두 가지가 있다.
전자를 블록 레벨 Element, 후자를 인라인 Element 라고 한다.
전용 속성은 DISPLAY 이고 Block으로 할지, Inline으로 할지 정해준다.
( ex. display: block; ) | 어떤 태그가 표시되는 방법을 바꿔주는 속성(display)

물론 CSS를 통해 언제든 조절해줄 수도 있다. ( 적용 예시 : border-width: 5px, border-color: red, border-style: solid )

필요에 따라 박스를 안 보이게 하고 싶으면 'display: none;'해주면 된다.

+) 선택자 태그 두 가지가 같은 속성 값을 갖고 있다면 중복 제거 해주는 방법이 있다. 다음과 같다.
<style> h1, a { border: 5px solid red; } </style> => 최대한 자른 결과이다. 순서는 중요하지 않다.

박스 내에 글자와 틈(공백)을 주고 싶을 때는 ( ex. PADDING: 20px ) 속성 값을 주면 된다.
아래 소스를 하나 더 주게 되면, MARGIN이 생기는데 이 마진(공백)을 없애주고 싶으면 ( ex. MARGIN: 0px; ) 을 주면 된다.
마진을 늘리고 싶으면 마찬가지로 주되 숫자만 높여주면 된다.

<h1>은 헤더 타이틀로서 display: block 즉, 박스가 화면 전체를 쓰고 있음을 알 수 있었는데, 이를 조절할 수 있음도 CSS다.
( ex. <style> a { width: 60px; } </style> }

웹에서 해당 텍스트에 '검사'를 클릭하면, '개발자 도구'를 펼쳐 활용할 수 있다( ex. 박스 내 Padding, Border, Margin이 어떻게 되는지 )
그럼 border-botton: 1px solid gray; 로 실선과 글자 간격을 보고  패딩을 어떻게 해야 위치가 괜찮을지 확인하며 개발할 수 있다.
개발자 도구(F12)를 펼치고 검사 아이콘을 클릭한 뒤에 웹 브라우저 영역을 클릭하면 어떤 태그에 해당하는 영역인지 코드로 보여준다.
그럼 그 태그에 대해서 PADDING, BORDER, MARGIN을 확인하고 레이아웃 크기를 조절할 수 있다.

<ol> 태그에 대한 선택자를 지정하고 border-right: 1px solid gray; 속성을 주면 맨 오른쪽 끝부분에 세로 줄이 생성되어 잘 안 보이는
현상이 생긴다. 이유는 <ol> 태그가 순서 번호가 자동 생성되는 기능을 하는데 화면 전체를 쓰는 Block element 이기 때문이다.
그럼 어떻게 해야할까? CSS 방식으로 <ol> 태그의 간격을 조절해주면 된다. 간격 조절을 위한 속성은 width이다. ( ex. width: 100px; )
